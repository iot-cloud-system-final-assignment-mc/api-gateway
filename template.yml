AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Iot-Cloud-Systems Final Assignment - Marco Cavalli

Parameters:
  ApiKeyAdminParameter:
    Type: String
    Default: 9a7743fa-3ae7-11eb-adc1-0242ac120002
  ApiKeyUserParameter:
    Type: String
    Default: 88b43c36-802e-11eb-af35-38f9d35b2c15
  StageName:
    Type: String
    Default: prod
  GetProductsFunctionName:
    Type: String
    Default: GetProducts
  UpsertProductFunctionName:
    Type: String
    Default: UpsertProduct

Resources:
  # API
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: !Join ["", ["iot-cloud-systems-", !Ref "AWS::Region"]]
        basePath: !Join ["", ["/", !Ref StageName]]
        x-amazon-apigateway-api-key-source: "AUTHORIZER"
        schemes:
          - https
        paths:
          /products:
            get:
              summary: Returns all products
              description: Returns all products
              produces:
                - application/json
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Join
                  - ""
                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
                    - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${GetProductsFunctionName}
                    - /invocations
                httpMethod: POST
                type: aws_proxy
            options:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
          /product:
            post:
              summary: Upsert a product
              description: Upsert a product
              produces:
                - application/json
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Join
                  - ""
                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
                    - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${UpsertProductFunctionName}
                    - /invocations
                httpMethod: POST
                type: aws_proxy
            options:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
      StageName: prod

  # PERMISSIONS
  GetProductsLambdaApiGatewayExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetProductsFunctionName
      Principal: apigateway.amazonaws.com
      SourceArn: !Join ["", ["arn:aws:execute-api:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":", !Ref ApiGatewayApi, "/*/*/*" ]]

  UpsertProductLambdaApiGatewayExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UpsertProductFunctionName
      Principal: apigateway.amazonaws.com
      SourceArn: !Join ["", ["arn:aws:execute-api:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":", !Ref ApiGatewayApi, "/*/*/*" ]]


Outputs:
  ApiURL:
    Description: "API Gateway endpoint URL for API"
    Value: !Join ["", ["https://", !Ref "ApiGatewayApi", ".execute-api.", !Ref "AWS::Region", ".amazonaws.com/", !Ref StageName, "/"]]
    Export:
      Name: "Cloud-Systems-IoT-ApiURL"